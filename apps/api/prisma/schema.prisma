generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String             @id @default(cuid())
  username                String
  email                   String             @unique
  password                String
  referralCode            String             @unique
  isVerified              Boolean            @default(false)
  profilePictureUrl       String?
  profilePictureDirectory String?
  phoneNumber             String?
  birthDate               DateTime?          @db.Date
  address                 String?
  gender                  Gender?
  role                    String             @default("CUSTOMER")
  totalPoint              Int                @default(0)
  isGoogleRegistered      Boolean            @default(false)
  countResetPass          Int                @default(0)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  deletedAt               DateTime?
  referralDiscounts       ReferralDiscount[]
  referralPoints          ReferralPoint[]
  reviews                 Review[]
  transactions            Transaction[]

  @@map("users")
}

model EventOrganizer {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  companyName             String
  address                 String
  phoneNumber             String
  profilePictureUrl       String?
  profilePictureDirectory String?
  isVerified              Boolean   @default(false)
  pic                     String
  role                    String    @default("EO")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  deletedAt               DateTime?
  events                  Event[]

  @@map("event_organizers")
}

model ReferralPoint {
  id        String    @id @default(cuid())
  point     Int
  expiry    DateTime
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  users     User      @relation(fields: [userId], references: [id])

  @@map("referral_points")
}

model ReferralDiscount {
  id              String    @id @default(cuid())
  percentDiscount Int
  expiry          DateTime
  isUsed          Boolean   @default(false)
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  users           User      @relation(fields: [userId], references: [id])

  @@map("referral_discounts")
}

model Event {
  id             String         @id @default(cuid())
  name           String
  type           EventType
  locationName   String
  location       String
  url            String?
  description    String?
  startDate      DateTime
  endDate        DateTime
  isPaid         Boolean        @default(false)
  capacity       Int
  categoryId     Int
  eoId           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  images         EventImage[]
  tickets        EventTicket[]
  categories     Category       @relation(fields: [categoryId], references: [id])
  eventOrganizer EventOrganizer @relation(fields: [eoId], references: [id])
  reviews        Review[]

  @@map("events")
}

model EventTicket {
  id                  String              @id @default(cuid())
  name                String
  price               Int
  available           Int
  bookSeat            Int
  totalSeat           Int
  discount            Int                 @default(0)
  discountStart       DateTime?
  discountExpiry      DateTime?
  startDate           DateTime
  endDate             DateTime
  eventId             String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  deletedAt           DateTime?
  events              Event               @relation(fields: [eventId], references: [id])
  transaction_details TransactionDetail[]

  @@map("event_tickets")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  events    Event[]

  @@map("categories")
}

model EventImage {
  id        Int       @id @default(autoincrement())
  url       String
  eventId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  events    Event     @relation(fields: [eventId], references: [id])

  @@map("event_images")
}

model Transaction {
  id         String              @id @default(cuid())
  eventId    String
  totalPrice Int                 @default(0)
  status     Status              @default(WAITING_FOR_PAYMENT)
  userId     String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  deletedAt  DateTime?
  details    TransactionDetail[]
  eventOrganizerId String
  transactionStatus TransactionStatus[]
  user       User                @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model TransactionDetail {
  id            Int         @id @default(autoincrement())
  price         Int
  qty           Int
  transactionId String
  ticketId      String
  expiry        DateTime?   
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  tickets       EventTicket @relation(fields: [ticketId], references: [id])
  transactions  Transaction @relation(fields: [transactionId], references: [id])

  @@map("transaction_details")
}

model TransactionStatus {
  id             Int     @id @default(autoincrement())
  transactionsId String?
  status         Status

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  Transactions Transaction? @relation(fields: [transactionsId], references: [id])

  @@map("transactionStatus")
}

model Review {
  comments  String?
  rating    Int
  feedback  String?
  userId    String
  eventId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  events    Event     @relation(fields: [eventId], references: [id])
  users     User      @relation(fields: [userId], references: [id])

  @@id([userId, eventId])
  @@map("reviews")
}

enum Gender {
  MALE
  FEMALE
}

enum EventType {
  ONLINE
  OFFLINE
}

enum Status {
  WAITING_FOR_PAYMENT
  PAID
  CANCELLED
}
